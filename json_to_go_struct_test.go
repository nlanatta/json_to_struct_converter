package main

import (
	"fmt"
	"strings"
	"testing"
)

type cases struct {
	expected string
	json     string
	test     *testing.T
}

func TestJsonToStruct(t *testing.T) {
	c := []cases{
		{
			test:     t,
			json:     "{\n  \"id\": \"123456789\",\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"johndoe@example.com\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipcode\": \"10001\"\n  },\n  \"phoneNumbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"555-1234\"\n    },\n    {\n      \"type\": \"work\",\n      \"number\": \"555-5678\"\n    }\n  ],\n  \"isStudent\": true,\n  \"grades\": [85, 92, 78, 95],\n  \"courses\": [\n    {\n      \"name\": \"Math\",\n      \"teacher\": \"Mr. Smith\",\n      \"schedule\": {\n        \"day\": \"Monday\",\n        \"time\": \"9:00 AM\"\n      }\n    },\n    {\n      \"name\": \"Science\",\n      \"teacher\": \"Mrs. Johnson\",\n      \"schedule\": {\n        \"day\": \"Wednesday\",\n        \"time\": \"2:00 PM\"\n      }\n    }\n  ]\n}",
			expected: "type AutogeneratedStruct struct {\n  Address struct {\n  City string `json:\"city\"`\n  State string `json:\"state\"`\n  Street string `json:\"street\"`\n  Zipcode string `json:\"zipcode\"`\n} `json:\"address\"`\n  Age float64 `json:\"age\"`\n  Courses []struct {\n  Name string `json:\"name\"`\n  Schedule struct {\n  Day string `json:\"day\"`\n  Time string `json:\"time\"`\n} `json:\"schedule\"`\n  Teacher string `json:\"teacher\"`\n} `json:\"courses\"`\n  Email string `json:\"email\"`\n  Grades []float64 `json:\"grades\"`\n  Id string `json:\"id\"`\n  IsStudent bool `json:\"isstudent\"`\n  Name string `json:\"name\"`\n  PhoneNumbers []struct {\n  Number string `json:\"number\"`\n  Type string `json:\"type\"`\n} `json:\"phonenumbers\"`\n}",
		},
		{
			test:     t,
			json:     "{\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n",
			expected: "type AutogeneratedStruct struct {\n  Age float64 `json:\"age\"`\n  City string `json:\"city\"`\n  Name string `json:\"name\"`\n}",
		},
		{
			test:     t,
			json:     "[\n  {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Jane Smith\",\n    \"age\": 25,\n    \"city\": \"Los Angeles\"\n  },\n  {\n    \"name\": \"Bob Johnson\",\n    \"age\": 35,\n    \"city\": \"Chicago\"\n  }\n]\n",
			expected: "type AutogeneratedStruct []struct {\n  Age float64 `json:\"age\"`\n  City string `json:\"city\"`\n  Name string `json:\"name\"`\n}",
		},
		{
			test:     t,
			json:     "{\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10001\"\n  }\n}\n",
			expected: "type AutogeneratedStruct struct {\n  Address struct {\n  City string `json:\"city\"`\n  PostalCode string `json:\"postalcode\"`\n  State string `json:\"state\"`\n  Street string `json:\"street\"`\n} `json:\"address\"`\n  Age float64 `json:\"age\"`\n  Name string `json:\"name\"`\n}",
		},
		{
			test:     t,
			json:     "[\n  \"apple\",\n  \"banana\",\n  \"orange\"\n]",
			expected: "type AutogeneratedStruct []string",
		},
		{
			test:     t,
			json:     "{\n  \"isAvailable\": true,\n  \"isActive\": false\n}\n",
			expected: "type AutogeneratedStruct struct {\n  IsActive bool `json:\"isactive\"`\n  IsAvailable bool `json:\"isavailable\"`\n}",
		},
		{
			test:     t,
			json:     "{\n  \"name\": null,\n  \"age\": 30\n}\n",
			expected: "type AutogeneratedStruct struct {\n  Age float64 `json:\"age\"`\n  Name <nil> `json:\"name\"`\n}",
		},
	}

	for i, v := range c {
		t.Run(fmt.Sprintf("Testing # %d", i), func(t *testing.T) {
			converter := JsonToStruct()
			converter.Run(v.json)
			got := converter.Clipboard()
			v1 := strings.ReplaceAll(v.expected, "\r", "")
			v1 = strings.ReplaceAll(v1, "\n", "")
			v1 = strings.ReplaceAll(v1, "\t", "")
			v1 = strings.ReplaceAll(v1, " ", "")
			v2 := strings.ReplaceAll(got, "\r", "")
			v2 = strings.ReplaceAll(v2, "\n", "")
			v2 = strings.ReplaceAll(v2, "\t", "")
			v2 = strings.ReplaceAll(v2, " ", "")

			if v1 != v2 {
				t.Fatalf("expected %s. got %s", v.expected, got)
			}
		})
	}
}
